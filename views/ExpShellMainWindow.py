# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ExpShellMainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets, QtGui
from views.ConsultWindow import Ui_ConsultWindow
from views.DomenEditorWindow import Ui_DomenEditorWindow
from views.EditRuleWindow import Ui_EditRuleWindow
from views.EditVarWindow import Ui_EditVarWindow
from models.ExpertSystem import ExpertSystem
from views.pyqt5_exten.TableWidgetDragRows import TableWidgetDragRows
import copy
from models.VarType import VarType
from models.Fact import Fact
import json

class Ui_ExpShellMainWindow(object):
    def setupUi(self, ExpShellMainWindow):
        ExpShellMainWindow.setObjectName("ExpShellMainWindow")
        ExpShellMainWindow.resize(659, 525)
        ExpShellMainWindow.setMinimumSize(QtCore.QSize(659, 525))
        ExpShellMainWindow.setMaximumSize(QtCore.QSize(659, 525))
        ExpShellMainWindow.setBaseSize(QtCore.QSize(659, 345))
        self.centralwidget = QtWidgets.QWidget(ExpShellMainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabPanel = QtWidgets.QTabWidget(self.centralwidget)
        self.tabPanel.setEnabled(True)
        self.tabPanel.setGeometry(QtCore.QRect(0, 0, 660, 461))

        self.tabPanel.setObjectName("tabPanel")

        self.ruleTab = QtWidgets.QWidget()
        self.ruleTab.setObjectName("ruleTab")

        self.editRulesGroupBox = QtWidgets.QGroupBox(self.ruleTab)
        self.editRulesGroupBox.setGeometry(QtCore.QRect(460, 0, 191, 91))
        self.editRulesGroupBox.setObjectName("editRulesGroupBox")

        self.addRuleButton = QtWidgets.QPushButton(self.editRulesGroupBox)
        self.addRuleButton.setGeometry(QtCore.QRect(5, 15, 181, 23))
        self.addRuleButton.setObjectName("addRuleButton")

        self.editRuleButton = QtWidgets.QPushButton(self.editRulesGroupBox)
        self.editRuleButton.setGeometry(QtCore.QRect(5, 40, 181, 23))
        self.editRuleButton.setObjectName("editRuleButton")

        self.delRuleButton = QtWidgets.QPushButton(self.editRulesGroupBox)
        self.delRuleButton.setGeometry(QtCore.QRect(5, 65, 181, 23))
        self.delRuleButton.setObjectName("delRuleButton")

        self.requisiteBox = QtWidgets.QGroupBox(self.ruleTab)
        self.requisiteBox.setGeometry(QtCore.QRect(460, 100, 191, 161))
        self.requisiteBox.setObjectName("requisiteBox")

        self.requisiteText = QtWidgets.QTextEdit(self.requisiteBox)
        self.requisiteText.setEnabled(False)
        self.requisiteText.setGeometry(QtCore.QRect(10, 20, 171, 131))
        self.requisiteText.setObjectName("requisiteText")

        self.conclusionBox = QtWidgets.QGroupBox(self.ruleTab)
        self.conclusionBox.setGeometry(QtCore.QRect(460, 270, 191, 161))
        self.conclusionBox.setObjectName("conclusionBox")

        self.conclusionText = QtWidgets.QTextEdit(self.conclusionBox)
        self.conclusionText.setEnabled(False)
        self.conclusionText.setGeometry(QtCore.QRect(10, 20, 171, 131))
        self.conclusionText.setObjectName("conclusionText")

        self.rulesView = TableWidgetDragRows(self.ruleTab, dropEventCallback=self.dropRuleCb)
        self.rulesView.setGeometry(QtCore.QRect(0, 0, 461, 431))
        self.rulesView.setObjectName("rulesView")
        self.rulesView.setColumnCount(2)
        self.rulesView.setHorizontalHeaderLabels(["Имя", "Описание"])
        self.rulesView.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
        self.rulesView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        self.tabPanel.addTab(self.ruleTab, "")

        self.varTab = QtWidgets.QWidget()
        self.varTab.setObjectName("varTab")

        self.editVarGroupBox = QtWidgets.QGroupBox(self.varTab)
        self.editVarGroupBox.setGeometry(QtCore.QRect(460, 0, 191, 91))
        self.editVarGroupBox.setObjectName("editVarGroupBox")

        self.addVarButton = QtWidgets.QPushButton(self.editVarGroupBox)
        self.addVarButton.setGeometry(QtCore.QRect(5, 15, 181, 23))
        self.addVarButton.setObjectName("addVarButton")

        self.editVarButton = QtWidgets.QPushButton(self.editVarGroupBox)
        self.editVarButton.setGeometry(QtCore.QRect(5, 40, 181, 23))
        self.editVarButton.setObjectName("editVarButton")

        self.delVarButton = QtWidgets.QPushButton(self.editVarGroupBox)
        self.delVarButton.setGeometry(QtCore.QRect(5, 65, 181, 23))
        self.delVarButton.setObjectName("delVarButton")

        self.questionTextBox = QtWidgets.QGroupBox(self.varTab)
        self.questionTextBox.setGeometry(QtCore.QRect(460, 100, 191, 161))
        self.questionTextBox.setObjectName("questionTextBox")

        self.questionText = QtWidgets.QTextEdit(self.questionTextBox)
        self.questionText.setEnabled(False)
        self.questionText.setGeometry(QtCore.QRect(10, 20, 171, 131))
        self.questionText.setObjectName("questionText")

        self.domensVarBox = QtWidgets.QGroupBox(self.varTab)
        self.domensVarBox.setGeometry(QtCore.QRect(460, 270, 191, 161))
        self.domensVarBox.setObjectName("domensVarBox")

        self.domensVarText = QtWidgets.QTextEdit(self.domensVarBox)
        self.domensVarText.setEnabled(False)
        self.domensVarText.setGeometry(QtCore.QRect(10, 20, 171, 131))
        self.domensVarText.setObjectName("domensVarText")

        self.varsView = QtWidgets.QTableWidget(self.varTab)
        self.varsView.setGeometry(QtCore.QRect(0, 0, 461, 431))
        self.varsView.setObjectName("varsView")
        self.varsView.setColumnCount(3)
        self.varsView.setHorizontalHeaderLabels(["Имя", "Тип", "Домен"])
        self.varsView.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
        self.varsView.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        self.tabPanel.addTab(self.varTab, "")

        self.domenTab = QtWidgets.QWidget()
        self.domenTab.setObjectName("domenTab")

        self.domenValuesBox = QtWidgets.QGroupBox(self.domenTab)
        self.domenValuesBox.setGeometry(QtCore.QRect(460, 100, 191, 331))
        self.domenValuesBox.setObjectName("domenValuesBox")

        self.domenValues = QtWidgets.QTextEdit(self.domenValuesBox)
        self.domenValues.textChanged.connect(self.domenValues.undo)
        self.domenValues.setGeometry(QtCore.QRect(10, 20, 171, 301))
        self.domenValues.setObjectName("domenValues")

        self.editDomenGroupBox = QtWidgets.QGroupBox(self.domenTab)
        self.editDomenGroupBox.setGeometry(QtCore.QRect(460, 0, 191, 91))
        self.editDomenGroupBox.setObjectName("editDomenGroupBox")

        self.addDomenButton = QtWidgets.QPushButton(self.editDomenGroupBox)
        self.addDomenButton.setGeometry(QtCore.QRect(5, 15, 181, 23))
        self.addDomenButton.setObjectName("addDomenButton")

        self.editDomenButton = QtWidgets.QPushButton(self.editDomenGroupBox)
        self.editDomenButton.setGeometry(QtCore.QRect(5, 40, 181, 23))
        self.editDomenButton.setObjectName("editDomenButton")

        self.delDomenButton = QtWidgets.QPushButton(self.editDomenGroupBox)
        self.delDomenButton.setGeometry(QtCore.QRect(5, 65, 181, 23))
        self.delDomenButton.setObjectName("delDomenButton")

        self.domensView = QtWidgets.QTableWidget(self.domenTab)
        self.domensView.setGeometry(QtCore.QRect(0, 0, 461, 431))
        self.domensView.setObjectName("domensView")
        self.domensView.setColumnCount(1)
        self.domensView.setHorizontalHeaderLabels(["Имя"])
        self.domensView.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)

        self.tabPanel.addTab(self.domenTab, "")
        self.consultButton = QtWidgets.QPushButton(self.centralwidget)
        self.consultButton.setGeometry(QtCore.QRect(0, 460, 651, 23))
        self.consultButton.setObjectName("consultButton")
        ExpShellMainWindow.setCentralWidget(self.centralwidget)
        self.mainMenu = QtWidgets.QMenuBar(ExpShellMainWindow)
        self.mainMenu.setGeometry(QtCore.QRect(0, 0, 659, 21))
        self.mainMenu.setObjectName("mainMenu")
        self.fileActions = QtWidgets.QMenu(self.mainMenu)
        self.fileActions.setObjectName("fileActions")
        ExpShellMainWindow.setMenuBar(self.mainMenu)
        self.statusbar = QtWidgets.QStatusBar(ExpShellMainWindow)
        self.statusbar.setObjectName("statusbar")
        ExpShellMainWindow.setStatusBar(self.statusbar)
        self.openFile = QtWidgets.QAction(ExpShellMainWindow)
        self.openFile.setObjectName("openFile")
        self.saveFileAs = QtWidgets.QAction(ExpShellMainWindow)
        self.saveFileAs.setObjectName("saveFileAs")
        self.exit = QtWidgets.QAction(ExpShellMainWindow)
        self.exit.setObjectName("exit")
        self.fileActions.addSeparator()
        self.fileActions.addAction(self.openFile)
        self.fileActions.addAction(self.saveFileAs)
        self.fileActions.addSeparator()
        self.fileActions.addAction(self.exit)
        self.mainMenu.addAction(self.fileActions.menuAction())

        self.retranslateUi(ExpShellMainWindow)
        self.tabPanel.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(ExpShellMainWindow)
        self.expShellMainWindow = ExpShellMainWindow
        self.connectButtons()

    def retranslateUi(self, ExpShellMainWindow):
        _translate = QtCore.QCoreApplication.translate
        ExpShellMainWindow.setWindowTitle(_translate("ExpShellMainWindow", "Экспертная система"))
        self.editRulesGroupBox.setTitle(_translate("ExpShellMainWindow", "Редактирование"))
        self.addRuleButton.setText(_translate("ExpShellMainWindow", "Добавить"))
        self.editRuleButton.setText(_translate("ExpShellMainWindow", "Изменить"))
        self.delRuleButton.setText(_translate("ExpShellMainWindow", "Удалить"))
        self.requisiteBox.setTitle(_translate("ExpShellMainWindow", "Посылка"))
        self.conclusionBox.setTitle(_translate("ExpShellMainWindow", "Заключение"))
        self.tabPanel.setTabText(self.tabPanel.indexOf(self.ruleTab), _translate("ExpShellMainWindow", "Правила"))
        self.editVarGroupBox.setTitle(_translate("ExpShellMainWindow", "Редактирование"))
        self.addVarButton.setText(_translate("ExpShellMainWindow", "Добавить"))
        self.editVarButton.setText(_translate("ExpShellMainWindow", "Изменить"))
        self.delVarButton.setText(_translate("ExpShellMainWindow", "Удалить"))
        self.questionTextBox.setTitle(_translate("ExpShellMainWindow", "Вопрос"))
        self.domensVarBox.setTitle(_translate("ExpShellMainWindow", "Значения"))
        self.tabPanel.setTabText(self.tabPanel.indexOf(self.varTab), _translate("ExpShellMainWindow", "Переменные"))
        self.domenValuesBox.setTitle(_translate("ExpShellMainWindow", "Значения домена"))
        self.editDomenGroupBox.setTitle(_translate("ExpShellMainWindow", "Редактирование"))
        self.addDomenButton.setText(_translate("ExpShellMainWindow", "Добавить"))
        self.editDomenButton.setText(_translate("ExpShellMainWindow", "Изменить"))
        self.delDomenButton.setText(_translate("ExpShellMainWindow", "Удалить"))
        self.tabPanel.setTabText(self.tabPanel.indexOf(self.domenTab), _translate("ExpShellMainWindow", "Домены"))
        self.consultButton.setText(_translate("ExpShellMainWindow", "Пройти консультацию"))
        self.fileActions.setTitle(_translate("ExpShellMainWindow", "Файл"))
        self.openFile.setText(_translate("ExpShellMainWindow", "Открыть"))
        self.saveFileAs.setText(_translate("ExpShellMainWindow", "Сохранить как"))
        self.exit.setText(_translate("ExpShellMainWindow", "Выход"))

    def dropRuleCb(self, drop_row, rows_to_move):
        for row_index, data in enumerate(rows_to_move):
            row_index += drop_row
            self.expShellMainWindow.expertSystem.swapRules(drop_row, row_index)

    def connectButtons(self):
        self.consultButton.clicked.connect(self.openConsultWindow)

        self.openFile.triggered.connect(self.openFileAct)
        self.saveFileAs.triggered.connect(self.saveFileAsAct)
        self.exit.triggered.connect(self.exitFileAct)

        self.addRuleButton.clicked.connect(self.openAddRuleWindow)
        self.editRuleButton.clicked.connect(self.openEditRuleWindow)
        self.delRuleButton.clicked.connect(self.delRule)

        self.addVarButton.clicked.connect(self.openAddVarWindow)
        self.editVarButton.clicked.connect(self.openEditVarWindow)
        self.delVarButton.clicked.connect(self.delVar)

        self.addDomenButton.clicked.connect(self.openAddDomenWindow)
        self.editDomenButton.clicked.connect(self.openEditDomenWindow)
        self.delDomenButton.clicked.connect(self.delDomen)

    def openConsultWindow(self):
        self.consultWindow = QtWidgets.QMainWindow()
        self.consultUI = Ui_ConsultWindow()
        self.consultWindow.prevWindow = self
        self.consultUI.setupUi(self.consultWindow)
        self.consultWindow.show()

    # работа с файлами
    def openFileAct(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(ExpShellMainWindow, "QFileDialog.getOpenFileName()",
                                                            r"G:\10_tr\ExpSysShell\MyShell\\",
                                                            "ExpSys Files(*.json)", options=options)
        if fileName == "":
            return False
        with open(fileName, "r") as jsonDes:
            esDict = json.loads(jsonDes.readline())
            es = ExpertSystem(esDict['_ExpertSystem__name'])
            memoryDict = esDict['_ExpertSystem__memory']
            domensDict = memoryDict['_ExpertSystemMemory__domens']
            variablesDict = memoryDict['_ExpertSystemMemory__variables']
            rulesDict = memoryDict['_ExpertSystemMemory__rules']
            for dom in domensDict.values():
                es.addDomen(dom['_Domen__name'], dom['_Domen__vals'])

            for var in variablesDict.values():
                dom = es.getDomenByName(var['_Variable__domen']['_Domen__name'])
                vtName = var['_Variable__varType']['_name_']
                if vtName == 'REQUESTED':
                    vt = VarType.REQUESTED
                elif vtName == 'INFERRED':
                    vt = VarType.INFERRED
                else:
                    vt = VarType.OUTPUT_REQUESTED
                es.addVariable(var['_Variable__name'], dom, var['_Variable__question'], vt)

            for rul in rulesDict.values():
                rName = rul['_Rule__name']
                rDescr = rul['_Rule__description']
                rReasons = []
                for reas in rul['_Rule__reasons'].values():
                    var = es.getVariableByName(reas['_Fact__var']['_Variable__name'])
                    rReasons.append(Fact(var, reas['_Fact__val']))
                rConcl = []
                for conc in rul['_Rule__conclusions'].values():
                    var = es.getVariableByName(conc['_Fact__var']['_Variable__name'])
                    rConcl.append(Fact(var, conc['_Fact__val']))
                es.addRule(rName, rDescr, rReasons, rConcl)
            self.expShellMainWindow.expertSystem = es
            self.onDomensChange()
            self.onVarsChange()
            self.onRulesChange()

    def saveFileAsAct(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getSaveFileName(ExpShellMainWindow, "QFileDialog.getSaveFileName()",
                                                            r"G:\10_tr\ExpSysShell\MyShell\\" + self.expShellMainWindow.expertSystem.getName(),
                                                            "ExpSys Files(*.json)", options=options)
        if ".json" in fileName:
            fileName = fileName.replace(".json", "")
        if fileName == "":
            return False
        self.expShellMainWindow.expertSystem.setName(fileName.split("/")[-1])
        with open(fileName + ".json", "w") as jsonSer:
            es = copy.copy(self.expShellMainWindow.expertSystem)
            esMem = es.getMemory()

            jsonDict = copy.deepcopy(es.__dict__)
            jsonDict['_ExpertSystem__memory'] = copy.deepcopy(esMem.__dict__)
            jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__rules'] = jsonDict['_ExpertSystem__memory'].pop('_ExpertSystemMemory__ruleDict')
            jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'] = jsonDict['_ExpertSystem__memory'].pop('_ExpertSystemMemory__variablesDict')
            jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__domens'] = jsonDict['_ExpertSystem__memory'].pop('_ExpertSystemMemory__domensDict')
            jsonDict['_ExpertSystem__memory'].pop('_ExpertSystemMemory__activeRules')
            jsonDict['_ExpertSystem__memory'].pop('_ExpertSystemMemory__varsAndVals')

            for key, value in jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__rules'].items():
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__rules'][key] = copy.deepcopy(value.__dict__)

                rR = jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__rules'][key]['_Rule__reasons']
                rRDict = {}
                for fact in rR:
                    rRDict[fact.getVar().getName() + fact.getVal()] = copy.deepcopy(fact.__dict__)
                    var = copy.deepcopy(rRDict[fact.getVar().getName() + fact.getVal()]['_Fact__var'].__dict__)
                    var['_Variable__domen'] = copy.deepcopy(var['_Variable__domen'].__dict__)
                    var['_Variable__varType'] = copy.deepcopy(var['_Variable__varType'].__dict__)
                    if '_Variable__facts' in var.keys():
                        var.pop('_Variable__facts')
                    if '_Domen__vars' in var['_Variable__domen'].keys():
                        var['_Variable__domen'].pop('_Domen__vars')
                    if '__objclass__' in var['_Variable__varType'].keys():
                        var['_Variable__varType'].pop('__objclass__')
                    rRDict[fact.getVar().getName() + fact.getVal()]['_Fact__var'] = var
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__rules'][key]['_Rule__reasons'] = rRDict

                rC = jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__rules'][key]['_Rule__conclusions']
                rCDict = {}
                for fact in rC:
                    rCDict[fact.getVar().getName() + fact.getVal()] = copy.deepcopy(fact.__dict__)
                    var = copy.deepcopy(rCDict[fact.getVar().getName() + fact.getVal()]['_Fact__var'].__dict__)
                    var['_Variable__domen'] = copy.deepcopy(var['_Variable__domen'].__dict__)
                    var['_Variable__varType'] = copy.deepcopy(var['_Variable__varType'].__dict__)
                    if '_Variable__facts' in var.keys():
                        var.pop('_Variable__facts')
                    if '_Domen__vars' in var['_Variable__domen'].keys():
                        var['_Variable__domen'].pop('_Domen__vars')
                    if '__objclass__' in var['_Variable__varType'].keys():
                        var['_Variable__varType'].pop('__objclass__')
                    rCDict[fact.getVar().getName() + fact.getVal()]['_Fact__var'] = var
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__rules'][key]['_Rule__conclusions'] = rCDict

            for key, value in jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'].items():
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key] = copy.deepcopy(value.__dict__)
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key]['_Variable__domen'] = \
                    copy.deepcopy(jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key]['_Variable__domen'].__dict__)
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key]['_Variable__varType'] = \
                    copy.deepcopy(jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key]['_Variable__varType'].__dict__)
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key].pop('_Variable__facts')
                if '_Domen__vars' in jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key]['_Variable__domen'].keys():
                    jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key]['_Variable__domen'].pop('_Domen__vars')
                if '__objclass__' in jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key]['_Variable__varType'].keys():
                    jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__variables'][key]['_Variable__varType'].pop('__objclass__')

            for key, value in jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__domens'].items():
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__domens'][key] = copy.deepcopy(value.__dict__)
                jsonDict['_ExpertSystem__memory']['_ExpertSystemMemory__domens'][key].pop('_Domen__vars')
            jsonSer.write(json.dumps(jsonDict))

    def exitFileAct(self):
        self.expShellMainWindow.expertSystem = ExpertSystem("TempES")
        self.onDomensChange()
        self.onVarsChange()
        self.onRulesChange()

    # работа с правилами
    def openAddRuleWindow(self):
        self.addRuleWindow = QtWidgets.QMainWindow()
        self.addRuleUI = Ui_EditRuleWindow()
        selIt = self.rulesView.selectedItems()
        self.addRuleWindow.selIndex = self.expShellMainWindow.expertSystem.getRuleIndex(selIt[0].text()) + 1 if selIt \
            else len(self.expShellMainWindow.expertSystem.getRules())
        self.addRuleWindow.prevWindow = self
        self.addRuleUI.setupUi(self.addRuleWindow)
        self.addRuleWindow.show()

    def onRulesChange(self):
        rules = self.expShellMainWindow.expertSystem.getRules()
        self.rulesView.clear()
        self.rulesView.cellClicked.connect(self.onRuleSelect)
        self.rulesView.setColumnCount(2)
        self.rulesView.setHorizontalHeaderLabels(["Имя", "Описание"])
        self.rulesView.setRowCount(len(rules))
        i = 0
        for rule in reversed(rules):
            rName = QtWidgets.QTableWidgetItem(rule.getName())
            rName.setToolTip(rule.getName())
            self.rulesView.setItem(i, 0, rName)
            descr = rule.getDescription() if rule.getDescription() != "" else str(rule)
            ruleItem = QtWidgets.QTableWidgetItem(descr)
            ruleItem.setToolTip(str(rule))
            self.rulesView.setItem(i, 1, ruleItem)
            i += 1

    def onRuleSelect(self):
        self.conclusionText.clear()
        self.requisiteText.clear()
        selRule = self.expShellMainWindow.expertSystem.getRuleByName(self.rulesView.selectedItems()[0].text())
        if selRule:
            self.requisiteText.setText(", ".join([str(fact) for fact in selRule.getReasons()]))
            self.conclusionText.setText(", ".join([str(fact) for fact in selRule.getConclusions()]))

    def openEditRuleWindow(self):
        self.addRuleWindow = QtWidgets.QMainWindow()
        self.addRuleUI = Ui_EditRuleWindow()
        self.addRuleWindow.prevWindow = self
        selRuleItems = self.rulesView.selectedItems()
        selRule = None
        self.requisiteText.clear()
        self.conclusionText.clear()
        if len(selRuleItems) > 0:
            selRule = self.expShellMainWindow.expertSystem.getRuleByName(self.rulesView.selectedItems()[0].text())
        self.addRuleUI.setupUi(self.addRuleWindow, selRule)
        self.addRuleWindow.show()

    def delRule(self):
        if len(self.rulesView.selectedItems()) == 0:
            error = QtWidgets.QErrorMessage(self.expShellMainWindow)
            error.setWindowTitle("Ошибка!")
            error.showMessage("Нужно выбрать правило")
            return False
        self.expShellMainWindow.expertSystem.deleteRule(self.rulesView.selectedItems()[0].text())
        self.conclusionText.clear()
        self.requisiteText.clear()
        self.onRulesChange()

    # работа с переменными
    def openAddVarWindow(self):
        self.addVarWindow = QtWidgets.QMainWindow()
        self.addVarUI = Ui_EditVarWindow()
        self.addVarWindow.prevWindow = self
        self.addVarUI.setupUi(self.addVarWindow)
        self.addVarWindow.show()

    def onVarsChange(self):
        esVars = self.expShellMainWindow.expertSystem.getVariables()
        self.varsView.setEditTriggers(QtWidgets.QAbstractItemView.AllEditTriggers)
        self.varsView.clear()
        self.varsView.cellClicked.connect(self.onVarSelect)
        self.varsView.setColumnCount(3)
        self.varsView.setHorizontalHeaderLabels(["Имя", "Тип", "Домен"])
        self.varsView.setRowCount(len(esVars))
        i = 0
        for var in esVars:
            self.varsView.setItem(i, 0, QtWidgets.QTableWidgetItem(var.getName()))
            typeItem = QtWidgets.QTableWidgetItem(var.getVarTypeText())
            typeItem.setToolTip(var.getVarTypeText())
            self.varsView.setItem(i, 1, typeItem)
            domItem = QtWidgets.QTableWidgetItem(var.getDomen().getName())
            domItem.setToolTip(str(var.getDomen()))
            self.varsView.setItem(i, 2, domItem)
            i += 1
        self.varsView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

    def onVarSelect(self):
        self.questionText.clear()
        self.domensVarText.clear()
        selVar = self.expShellMainWindow.expertSystem.getVariableByName(self.varsView.selectedItems()[0].text())
        if selVar:
            self.questionText.setText(selVar.getQuestion())
            self.domensVarText.setText(";\n".join(selVar.getDomen().getValues()))

    def openEditVarWindow(self):
        self.addVarWindow = QtWidgets.QMainWindow()
        self.addVarUI = Ui_EditVarWindow()
        self.addVarWindow.prevWindow = self
        selVarItems = self.varsView.selectedItems()
        selVar = None
        self.questionText.clear()
        if len(selVarItems) > 0:
            selVar = self.expShellMainWindow.expertSystem.getVariableByName(self.varsView.selectedItems()[0].text())
        self.addVarUI.setupUi(self.addVarWindow, selVar)
        self.addVarWindow.show()

    def delVar(self):
        if len(self.varsView.selectedItems()) == 0:
            error = QtWidgets.QErrorMessage(self.expShellMainWindow)
            error.setWindowTitle("Ошибка!")
            error.showMessage("Нужно выбрать переменную")
            return False
        try:
            self.expShellMainWindow.expertSystem.deleteVariable(self.varsView.selectedItems()[0].text())
            self.questionText.clear()
            self.onVarsChange()
        except Exception as e:
            error = QtWidgets.QErrorMessage(self.expShellMainWindow)
            error.setWindowTitle("Ошибка!")
            error.showMessage(str(e))

    # работа с доменами
    def openAddDomenWindow(self):
        self.addDomenWindow = QtWidgets.QMainWindow()
        self.addDomenWindow.prevWindow = self
        self.addDomenUI = Ui_DomenEditorWindow()
        self.addDomenUI.setupUi(self.addDomenWindow)
        self.addDomenWindow.show()

    def onDomensChange(self):
        domens = self.expShellMainWindow.expertSystem.getDomens()
        self.domensView.setEditTriggers(QtWidgets.QAbstractItemView.AllEditTriggers)
        self.domensView.clear()
        self.domensView.setColumnCount(1)
        self.domensView.cellClicked.connect(self.onDomenSelect)
        self.domensView.setHorizontalHeaderLabels(["Имя"])
        self.domensView.setRowCount(len(domens))
        i = 0
        for dom in domens:
            self.domensView.setItem(i, 0, QtWidgets.QTableWidgetItem(dom.getName()))
            i += 1
        self.domensView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

    def onDomenSelect(self):
        self.domenValues.clear()
        selDomName = self.domensView.selectedItems()[0].text()
        selDom = self.expShellMainWindow.expertSystem.getDomenByName(selDomName)
        if selDom:
            self.domenValues.setText(",\n".join(selDom.getValues()))

    def openEditDomenWindow(self):
        self.addDomenWindow = QtWidgets.QMainWindow()
        self.addDomenWindow.prevWindow = self
        self.addDomenUI = Ui_DomenEditorWindow()
        selDomItems = self.domensView.selectedItems()
        selDom = None
        self.domenValues.clear()
        if len(selDomItems) > 0:
            selDom = self.expShellMainWindow.expertSystem.getDomenByName(self.domensView.selectedItems()[0].text())
        self.addDomenUI.setupUi(self.addDomenWindow, selDom)
        self.addDomenWindow.show()

    def delDomen(self):
        if len(self.domenValues.selectedItems()) == 0:
            error = QtWidgets.QErrorMessage(self.expShellMainWindow)
            error.setWindowTitle("Ошибка!")
            error.showMessage("Нужно выбрать домен")
            return False
        try:
            self.expShellMainWindow.expertSystem.deleteDomen(self.domensView.selectedItems()[0].text())
            self.domenValues.clear()
            self.onDomensChange()
        except Exception as e:
            error = QtWidgets.QErrorMessage(self.expShellMainWindow)
            error.setWindowTitle("Ошибка!")
            error.showMessage(str(e))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon(r"G:\images\av\cofe.jpg"))
    ExpShellMainWindow = QtWidgets.QMainWindow()
    ExpShellMainWindow.expertSystem = ExpertSystem("TempES")
    ui = Ui_ExpShellMainWindow()
    ui.setupUi(ExpShellMainWindow)
    ExpShellMainWindow.show()
    sys.exit(app.exec_())
